syntax = "proto3";

package rvcd;

service RvcdRpc {
    // When scaleda wants to open vcd file, source dir is based on history and shell argument
    rpc OpenFile (RvcdOpenFile) returns (RvcdEmpty) {}
    // For scaleda to request goto signal by path
    rpc GotoSignal (RvcdSignalPath) returns (RvcdEmpty) {}
    // For clients to sync data with manager
    rpc ClientInfo (RvcdManagedInfo) returns (RvcdEmpty) {}
    // See if this manage available
    rpc Ping (RvcdEmpty) returns (RvcdEmpty) {}
    // Set source dir, available for all rvcd apps
    rpc LoadSourceDir (RvcdLoadSourceDir) returns (RvcdEmpty) {}
    // Load source files, available for all rvcd apps
    rpc LoadSource (RvcdLoadSources) returns (RvcdEmpty) {}
    // Open file with arguments
    rpc OpenFileWith (RvcdOpenFileWith) returns (RvcdEmpty) {}
}

message RvcdEmpty {}

message RvcdOpenFile {
    string path = 1;
}

service RvcdClient {
    rpc Info (RvcdEmpty) returns (RvcdManagedInfo) {}
    rpc Ping (RvcdEmpty) returns (RvcdEmpty) {}
    rpc GotoSignal (RvcdSignalPath) returns (RvcdEmpty) {}
}

message RvcdManagedInfo {
    uint32 client_port = 1;
    repeated string paths = 2;
    string wave_file = 3;
}

message RvcdSignalPath {
    string file = 1;
    repeated string path = 2;
}

message RvcdLoadSourceDir {
    string path = 1;
}

message RvcdLoadSources {
    repeated string files = 1;
}

message RvcdOpenFileWith {
    string file = 1;
    string source_dir = 2;
    repeated string source_files = 3;
    RvcdSignalPath goto = 4;
}